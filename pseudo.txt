TOP Calculator Plus:

AFTER REVIEW OF THE INSTRUCTIONS AND THE GOTCHAS SECTION, ONLY 1 pair of numbers will be evaluated at a time. 

See below:

Gotchas: watch out for and fix these bugs if they show up in your code:
Your calculator should not evaluate more than a single pair of numbers at a time. Example: you enter a number (12), followed by an operator button (+), a second number button (7), and a second operator button (-). Your calculator should then do the following: first, evaluate the initial pair of numbers (12 + 7), then display the result of that calculation (19). Finally, use that result (19) as the first number in a new calculation, along with the next operator (-). An example of the behavior we’re looking for can be seen in this student’s calculator live preview.
You should round answers with long decimals so that they don’t overflow the display.
Pressing = before entering all of the numbers or an operator could cause problems!
Pressing “clear” should wipe out any existing data. Make sure the user is really starting fresh after pressing “clear”.
Display a snarky error message if the user tries to divide by 0… and don’t let it crash your calculator!


FULL INSTRUCTIONS: 

Introduction
You made it! By now you should have a really firm grasp on the fundamentals of JavaScript. Of course there’s plenty more to learn, but you should be able to create quite a bit at this point. Our final project is going to combine everything you’ve learned so far: you’re going to make an on-screen calculator using JavaScript, HTML, and CSS.

As usual with these things, there are elements of this project that are not going to be trivial for you, but if you’ve been following the course so far, you definitely have everything you need to finish it. We’re going to walk you through the various steps you can take, but again, how you actually implement them is up to you!

Warning
Before you get started with the project, we need to cover a word of warning. As you look into how to evaluate complex mathematical statements in JavaScript, you will likely come across the tantalizing eval() function. However, this function can be very dangerous and MDN does a good job documenting why you should never use eval! You’ll need to build your own functions to evaluate expressions as part of this project. On the same note, when researching how to calculate expressions, you may encounter solutions that suggest that you return a new Function() that evaluates a string. Similarly to eval(), this should not be used due to potential pitfalls of evaluating insecure data. Besides, where’s the fun in solutions that do all the work for you? Let’s get to it!

Assignment
Don’t forget to commit early & often! You can reference the Commit Messages lesson here!

Here are some use cases (expectations about your project):

Your calculator is going to contain functions for all of the basic math operators you typically find on calculators, so start by creating functions for the following items and testing them in your browser’s console:
add
subtract
multiply
divide
A calculator operation will consist of a number, an operator, and another number. For example, 3 + 5. Create three variables, one for each part of the operation. You’ll use these variables to update your display later.
Create a new function operate that takes an operator and two numbers and then calls one of the above functions on the numbers.
Create a basic HTML calculator with buttons for each digit and operator (including =).
Don’t worry about making them functional just yet.
There should also be a display for the calculator. Go ahead and fill it with some dummy numbers so it looks correct.
Add a “clear” button.
Create the functions that populate the display when you click the digit buttons. You should store the content of the display (the number) in a variable for use in the next step.
Make the calculator work! You’ll need to store the first and second numbers input by the user and then operate() on them when the user presses the = button, according to the operator that was selected between the numbers.
You should already have the code that can populate the display, so once operate has been called, update the display with the result of the operation.
This is the hardest part of the project. You need to figure out how to store all the values and call the operate function with them. Don’t feel bad if it takes you a while to figure out the logic.
Gotchas: watch out for and fix these bugs if they show up in your code:
Your calculator should not evaluate more than a single pair of numbers at a time. Example: you enter a number (12), followed by an operator button (+), a second number button (7), and a second operator button (-). Your calculator should then do the following: first, evaluate the initial pair of numbers (12 + 7), then display the result of that calculation (19). Finally, use that result (19) as the first number in a new calculation, along with the next operator (-). An example of the behavior we’re looking for can be seen in this student’s calculator live preview.
You should round answers with long decimals so that they don’t overflow the display.
Pressing = before entering all of the numbers or an operator could cause problems!
Pressing “clear” should wipe out any existing data. Make sure the user is really starting fresh after pressing “clear”.
Display a snarky error message if the user tries to divide by 0… and don’t let it crash your calculator!
Extra credit
Users can get floating point numbers if they do the math required to get one, but they can’t type them in yet. Add a . button and let users input decimals! Make sure you don’t let them type more than one though, like: 12.3.56.5. Disable the . button if there’s already a decimal separator in the display.
Add a “backspace” button, so the user can undo their last input if they click the wrong number.
Add keyboard support!






Original Plan:

I need to create a Calculator with a user interface that can add subtract multiply
and divide. I need it to be able to take 2 or more(MORE DESIRED) arguments that are numbers and as many arguments 
as needed of one kind of operator at a time.

In order to have multiple number args and multiple operator args work in a simple enough way, I will 
need to call the corresponding function of the operator arg only once regardless of the amount of operator args 
of that type and then process all number args in the operator function, then when an operator arg of another type
is entered the "operate()" function will need to immediately execute on the previous expression and use 
the result as the first number arg in the new expression with the new type of arg.

For example: 5 + 5 + 5 * 4 entered sequencially into the calculator will:
        constantly check if there are operator args of different types entered into the input
        and when triggered cause the "operate()" function (equivalent to the equal sign without operatorType value reset) 
        to execute and then take the displayed result as the first number arg in the next equation unless subsequently 
        cleared or all-cleared.

        First display 5 + 5 + 5 as clicked in the display, then when the * operator is clicked on the 
        calculator interface the check for operators args of different kinds/types will cause 
        5 + 5 + 5 to be summed and the result to be displayed and used as the first arg in the new 
        equation/expression that is tied to the * (multiplication) operator. 

        so when */X is clicked, the display will clear and then display 15 and then when 4 is subsequently clicked the 
        display will display 15 * 4 and then when the equal sign is clicked or another operator arg of a different 
        kind is clicked, the "operate()" function will be called and display the product of 60.



    1. Number clicked: displays number

    2. Operator clicked: operatorType value is checked, 

        if no value or value equals operator then, 
        displays operator, operatorType value is set to the entered operator

        if operatorType value exists and is not equal to the operator that was clicked then,
        operate() function is called,
        the current number args are processed by the current operatorType value's corresponding function then,
        the result is displayed and the operatorType value is set to the entered operator,

        (the operators' corresponding function will handle single number arg entries and provide the correct output)

        (when the '=' sign, 'a', or 'ac' buttons are clicked the operatorType value will be cleared to an empty string)

    3. Number clicked: displays number

    4. "Equal Sign" clicked: operate() function called,
        operate() function checks operatorType vlaue,
        operate() feeds number args into corresponding operator function,
        operate() displays results,
        operatorType value is cleared and reset to nothing (this is done by Equal sign, NOT by operate())


Additionally, when the '.' button is clicked (or when an argument containing the '.' is processed) the argument that
'.' is inside will need to be converted into a float.(each operator function needs to be able to handle a float)